@use "sass:list" as list;
@use "sass:map" as map;
@use "sass:meta" as meta;
@use "sass:math" as math;
@use "sass:string" as string;

@use "sass-styles-utils" as u;


$styles: () !default;
$root-font-px-size: 16 !default;

$length-unit: $sass-typography-length-unit !default;
$-length-units: px, rem, rem-px;
@if list.index($-length-units, $length-unit) == null {
  @error "$length-unit must be one of #{$-length-units} - not #{$length-unit}."
}
$preferred-length-unit: rem;
@if string.index($length-unit, rem) == null {
  $preferred-length-unit: px;
}

$-shorthand-map: (
  padding: padding-top padding-right padding-bottom padding-left,
  padding-y: padding-top padding-bottom,
  padding-x: padding-left padding-right,

  border-width: border-top-width border-right-width border-bottom-width border-left-width,
  border-y-width: border-top-width border-bottom-width,
  border-x-width: border-left-width border-right-width,

  border-style: border-top-style border-right-style border-bottom-style border-left-style,
  border-y-style: border-top-style border-bottom-style,
  border-x-style: border-left-style border-right-style,

  border-color: border-top-color border-right-color border-bottom-color border-left-color,
  border-y-color: border-top-color border-bottom-color,
  border-x-color: border-left-color border-right-color,

  margin: margin-top margin-right margin-bottom margin-left,
  margin-y: margin-top margin-bottom,
  margin-x: margin-left margin-right,

  background-position: background-position-x background-position-y,
  background-size: background-size-x background-size-y,

  border-radius:
    border-top-left-radius-y
    border-top-left-radius-x
    border-top-right-radius-y
    border-top-right-radius-x
    border-bottom-right-radius-y
    border-bottom-right-radius-x
    border-bottom-left-radius-y
    border-bottom-left-radius-x,
  border-top-radius:
    border-top-left-radius-y
    border-top-left-radius-x
    border-top-right-radius-y
    border-top-right-radius-x,
  border-right-radius:
    border-top-right-radius-y
    border-top-right-radius-x
    border-bottom-right-radius-y
    border-bottom-right-radius-x,
  border-bottom-radius:
    border-bottom-right-radius-y
    border-bottom-right-radius-x
    border-bottom-left-radius-y
    border-bottom-left-radius-x,
  border-left-radius:
    border-bottom-left-radius-y
    border-bottom-left-radius-x
    border-top-left-radius-y
    border-top-left-radius-x,
  border-top-left-radius:
    border-top-left-radius-y
    border-top-left-radius-x,
  border-top-right-radius:
    border-top-right-radius-y
    border-top-right-radius-x,
  border-bottom-right-radius:
    border-bottom-right-radius-y
    border-bottom-right-radius-x,
  border-bottom-left-radius:
    border-bottom-left-radius-y
    border-bottom-left-radius-x,
);

$-combined-properties-map: (
  background-size:
    background-size-x
    background-size-y,
  border-top-left-radius:
    border-top-left-radius-y
    border-top-left-radius-x,
  border-top-right-radius:
    border-top-right-radius-y
    border-top-right-radius-x,
  border-bottom-right-radius:
    border-bottom-right-radius-y
    border-bottom-right-radius-x,
  border-bottom-left-radius:
    border-bottom-left-radius-y
    border-bottom-left-radius-x,
);

$-combinable-properties: ();
@each $combined-property-name, $-combined-properties in $-combined-properties-map {
  $-combinable-properties: list.join($-combinable-properties, $-combined-properties);
}

$-property-map: (
  size: width height,

  padding-left: padding-left,
  padding-right: padding-right,
  padding-top: padding-top,
  padding-bottom: padding-bottom,

  border-left-width: border-left-width,
  border-right-width: border-right-width,
  border-top-width: border-top-width,
  border-bottom-width: border-bottom-width,

  border-left-style: border-left-style,
  border-right-style: border-right-style,
  border-top-style: border-top-style,
  border-bottom-style: border-bottom-style,

  border-left-color: border-left-color,
  border-right-color: border-right-color,
  border-top-color: border-top-color,
  border-bottom-color: border-bottom-color,

  margin-left: margin-left,
  margin-right: margin-right,
  margin-top: margin-top,
  margin-bottom: margin-bottom,

  background-position-x: background-position-x,
  background-position-y: background-position-y,

  background-size-x: background-size,
  background-size-y: background-size,

  border-top-left-radius: border-top-left-radius,
  border-top-right-radius: border-top-right-radius,
  border-bottom-right-radius: border-bottom-right-radius,
  border-bottom-left-radius: border-bottom-left-radius,
);


$-length-keys: (
  width,
  height,
);

$-length-key-parts: (
  padding-,
  margin-,
  -width,
  -radius,
);


@each $style-name, $-style in $styles {
  $new-keys: null;
  $style: $-style;
  @each $shorthand-key, $style-keys in $-shorthand-map {
    @if map.has-key($style, $shorthand-key) {
      $value: map.get($style, $shorthand-key);
      @each $style-key in $style-keys {
        $new-style: ($style-key: $value);
        @if $new-keys == null {
          $new-keys: $new-style;
        } else {
          $new-keys: map-merge($new-keys, $new-style);
        }
      }
    }
  }

  @if $new-keys != null {
    $styles: map-merge($styles, ($style-name: map-merge($new-keys, $style)));
  }
}


@function -is-length($property-key) {
  @if list.index($-length-keys, $property-key) != null {
    @return true;
  }
  @each $suffix in $-length-key-parts {
    @if string.index($property-key, $suffix) != null {
      @return true;
    }
  }
  @return false;
}


@function -add-unit($value, $unit) {
  @return u.add-unit($value, $unit, $root-font-px-size);
}


@function -get-rules(
  $style-name,
  $style-key,
  $property-name: null,
  $is-length: null,
) {
  $value: u.get-extended($style-name, $style-key, $styles);

  @if $property-name == null {
    @if map.has-key($-property-map, $style-key) {
      $property-name: map.get($-property-map, $style-key);
    } @else {
      $property-name: $style-key;
    }
  }

  @if $value == null {
    @return ();
  }

  $rules: ();
  @if (
    meta.type-of($value) == number
    and (
      math.unit($value) == px
      or math.unit($value) == rem
      or -is-length($style-key)
    )
  ) {
    @if string.index($length-unit, px) {
      $rules: map.merge($rules, ($property-name: -add-unit($value, px)));
    }
    @if string.index($length-unit, rem) {
      $rules: map.merge($rules, ($property-name: -add-unit($value, rem)));
    }
    @return($rules);
  } @else {
    @return($property-name: $value);
  }
}


@function -get-style($style-name) {
  $rules: ();

  $rules: map.merge($rules, -get-rules($style-name, padding-top));
  $rules: map.merge($rules, -get-rules($style-name, padding-right));
  $rules: map.merge($rules, -get-rules($style-name, padding-bottom));
  $rules: map.merge($rules, -get-rules($style-name, padding-left));
  $rules: map.merge($rules, -get-rules($style-name, border-top-width));
  $rules: map.merge($rules, -get-rules($style-name, border-right-width));
  $rules: map.merge($rules, -get-rules($style-name, border-bottom-width));
  $rules: map.merge($rules, -get-rules($style-name, border-left-width));
  $rules: map.merge($rules, -get-rules($style-name, border-top-style));
  $rules: map.merge($rules, -get-rules($style-name, border-right-style));
  $rules: map.merge($rules, -get-rules($style-name, border-bottom-style));
  $rules: map.merge($rules, -get-rules($style-name, border-left-style));
  $rules: map.merge($rules, -get-rules($style-name, border-top-color));
  $rules: map.merge($rules, -get-rules($style-name, border-right-color));
  $rules: map.merge($rules, -get-rules($style-name, border-bottom-color));
  $rules: map.merge($rules, -get-rules($style-name, border-left-color));
  $rules: map.merge($rules, -get-rules($style-name, margin-top));
  $rules: map.merge($rules, -get-rules($style-name, margin-right));
  $rules: map.merge($rules, -get-rules($style-name, margin-bottom));
  $rules: map.merge($rules, -get-rules($style-name, margin-left));
  $rules: map.merge($rules, -get-rules($style-name, background-color));
  $rules: map.merge($rules, -get-rules($style-name, background-image));
  $rules: map.merge($rules, -get-rules($style-name, background-size));
  $rules: map.merge($rules, -get-rules($style-name, background-position-x));
  $rules: map.merge($rules, -get-rules($style-name, background-position-y));
  $rules: map.merge($rules, -get-rules($style-name, border-top-left-radius-y));
  $rules: map.merge($rules, -get-rules($style-name, border-top-left-radius-x));
  $rules: map.merge($rules, -get-rules($style-name, border-top-right-radius-y));
  $rules: map.merge($rules, -get-rules($style-name, border-top-right-radius-x));
  $rules: map.merge($rules, -get-rules($style-name, border-bottom-right-radius-y));
  $rules: map.merge($rules, -get-rules($style-name, border-bottom-right-radius-x));
  $rules: map.merge($rules, -get-rules($style-name, border-bottom-left-radius-y));
  $rules: map.merge($rules, -get-rules($style-name, border-bottom-left-radius-x));

  $new-rules: ();
  $used-rules: ();
  @each $rule-name, $rule-value in $rules {
    // $-combined-properties-map
    // $-combinable-properties
    @if list.index($-combinable-properties, $rule-name) == null {
      $new-rules: map.merge($new-rules, ($rule-name: $rule-value));
    } @else if list.index($used-rules, $rule-name) == null {
      $combined-property-name: null;
      $combining-property-names: null;
      $combined-property-value: ();
      @each $name, $values in $-combined-properties-map {
        @if list.index($values, $rule-name) != null {
          $combined-property-name: $name;
          $combining-property-names: $values;
        }
      }
      @each $combining-property-name in $combining-property-names {
        @if map.has-key($rules, $combining-property-name) == false {
          @error "#{$combining-property-name} is missing in #{$rule-name}"
        }
        $combining-property-value: map.get($rules, $combining-property-name);
        $combined-property-value: list.append($combined-property-value, $combining-property-value);
      }
      $new-rules: map.merge($new-rules, ($combined-property-name: $combined-property-value));
      $used-rules: list.join($used-rules, $combining-property-names);
    }
  }

  @return $new-rules;
}


@mixin rule(
  $style-name,
  $style-key,
  $property-name: null,
  $is-length: null,
) {
  $rules: -get-rules(
    $style-name,
    $style-key,
    $property-name: null,
    $is-length: null,
  );
  @each $rule-name, $rule-value in $rules {
    #{$rule-name}: $rule-value;
  }
}


@mixin style($style-name) {
  @each $property-name, $property-value in -get-style($style-name) {
    #{$property-name}: $property-value;
  }
}
